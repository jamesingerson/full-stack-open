{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"./Observable.js\";\nimport { iterateObserversSafely } from \"./iteration.js\";\nimport { fixObservableSubclass } from \"./subclassing.js\";\n\nfunction isPromiseLike(value) {\n  return value && typeof value.then === \"function\";\n}\n\nvar Concast = function (_super) {\n  __extends(Concast, _super);\n\n  function Concast(sources) {\n    var _this = _super.call(this, function (observer) {\n      _this.addObserver(observer);\n\n      return function () {\n        return _this.removeObserver(observer);\n      };\n    }) || this;\n\n    _this.observers = new Set();\n    _this.addCount = 0;\n    _this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    _this.handlers = {\n      next: function (result) {\n        if (_this.sub !== null) {\n          _this.latest = [\"next\", result];\n          iterateObserversSafely(_this.observers, \"next\", result);\n        }\n      },\n      error: function (error) {\n        var sub = _this.sub;\n\n        if (sub !== null) {\n          if (sub) setTimeout(function () {\n            return sub.unsubscribe();\n          });\n          _this.sub = null;\n          _this.latest = [\"error\", error];\n\n          _this.reject(error);\n\n          iterateObserversSafely(_this.observers, \"error\", error);\n        }\n      },\n      complete: function () {\n        var sub = _this.sub;\n\n        if (sub !== null) {\n          var value = _this.sources.shift();\n\n          if (!value) {\n            if (sub) setTimeout(function () {\n              return sub.unsubscribe();\n            });\n            _this.sub = null;\n\n            if (_this.latest && _this.latest[0] === \"next\") {\n              _this.resolve(_this.latest[1]);\n            } else {\n              _this.resolve();\n            }\n\n            iterateObserversSafely(_this.observers, \"complete\");\n          } else if (isPromiseLike(value)) {\n            value.then(function (obs) {\n              return _this.sub = obs.subscribe(_this.handlers);\n            });\n          } else {\n            _this.sub = value.subscribe(_this.handlers);\n          }\n        }\n      }\n    };\n\n    _this.cancel = function (reason) {\n      _this.reject(reason);\n\n      _this.sources = [];\n\n      _this.handlers.complete();\n    };\n\n    _this.promise.catch(function (_) {});\n\n    if (typeof sources === \"function\") {\n      sources = [new Observable(sources)];\n    }\n\n    if (isPromiseLike(sources)) {\n      sources.then(function (iterable) {\n        return _this.start(iterable);\n      }, _this.handlers.error);\n    } else {\n      _this.start(sources);\n    }\n\n    return _this;\n  }\n\n  Concast.prototype.start = function (sources) {\n    if (this.sub !== void 0) return;\n    this.sources = Array.from(sources);\n    this.handlers.complete();\n  };\n\n  Concast.prototype.deliverLastMessage = function (observer) {\n    if (this.latest) {\n      var nextOrError = this.latest[0];\n      var method = observer[nextOrError];\n\n      if (method) {\n        method.call(observer, this.latest[1]);\n      }\n\n      if (this.sub === null && nextOrError === \"next\" && observer.complete) {\n        observer.complete();\n      }\n    }\n  };\n\n  Concast.prototype.addObserver = function (observer) {\n    if (!this.observers.has(observer)) {\n      this.deliverLastMessage(observer);\n      this.observers.add(observer);\n      ++this.addCount;\n    }\n  };\n\n  Concast.prototype.removeObserver = function (observer, quietly) {\n    if (this.observers.delete(observer) && --this.addCount < 1 && !quietly) {\n      this.handlers.complete();\n    }\n  };\n\n  Concast.prototype.cleanup = function (callback) {\n    var _this = this;\n\n    var called = false;\n\n    var once = function () {\n      if (!called) {\n        called = true;\n\n        _this.observers.delete(observer);\n\n        callback();\n      }\n    };\n\n    var observer = {\n      next: once,\n      error: once,\n      complete: once\n    };\n    var count = this.addCount;\n    this.addObserver(observer);\n    this.addCount = count;\n  };\n\n  return Concast;\n}(Observable);\n\nexport { Concast };\nfixObservableSubclass(Concast);","map":{"version":3,"mappings":"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","names":["__extends","Observable","iterateObserversSafely","fixObservableSubclass","isPromiseLike","value","then","Concast","_super","sources","_this","call","observer","addObserver","removeObserver","observers","Set","addCount","promise","Promise","resolve","reject","handlers","next","result","sub","latest","error","setTimeout","unsubscribe","complete","shift","obs","subscribe","cancel","reason","catch","_","iterable","start","prototype","Array","from","deliverLastMessage","nextOrError","method","has","add","quietly","delete","cleanup","callback","called","once","count"],"sources":["C:/Users/jamesi/Desktop/Repos/full-stack-open/part8/library-frontend/node_modules/@apollo/client/utilities/observables/Concast.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { Observable } from \"./Observable.js\";\nimport { iterateObserversSafely } from \"./iteration.js\";\nimport { fixObservableSubclass } from \"./subclassing.js\";\nfunction isPromiseLike(value) {\n    return value && typeof value.then === \"function\";\n}\nvar Concast = (function (_super) {\n    __extends(Concast, _super);\n    function Concast(sources) {\n        var _this = _super.call(this, function (observer) {\n            _this.addObserver(observer);\n            return function () { return _this.removeObserver(observer); };\n        }) || this;\n        _this.observers = new Set();\n        _this.addCount = 0;\n        _this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n        _this.handlers = {\n            next: function (result) {\n                if (_this.sub !== null) {\n                    _this.latest = [\"next\", result];\n                    iterateObserversSafely(_this.observers, \"next\", result);\n                }\n            },\n            error: function (error) {\n                var sub = _this.sub;\n                if (sub !== null) {\n                    if (sub)\n                        setTimeout(function () { return sub.unsubscribe(); });\n                    _this.sub = null;\n                    _this.latest = [\"error\", error];\n                    _this.reject(error);\n                    iterateObserversSafely(_this.observers, \"error\", error);\n                }\n            },\n            complete: function () {\n                var sub = _this.sub;\n                if (sub !== null) {\n                    var value = _this.sources.shift();\n                    if (!value) {\n                        if (sub)\n                            setTimeout(function () { return sub.unsubscribe(); });\n                        _this.sub = null;\n                        if (_this.latest &&\n                            _this.latest[0] === \"next\") {\n                            _this.resolve(_this.latest[1]);\n                        }\n                        else {\n                            _this.resolve();\n                        }\n                        iterateObserversSafely(_this.observers, \"complete\");\n                    }\n                    else if (isPromiseLike(value)) {\n                        value.then(function (obs) { return _this.sub = obs.subscribe(_this.handlers); });\n                    }\n                    else {\n                        _this.sub = value.subscribe(_this.handlers);\n                    }\n                }\n            },\n        };\n        _this.cancel = function (reason) {\n            _this.reject(reason);\n            _this.sources = [];\n            _this.handlers.complete();\n        };\n        _this.promise.catch(function (_) { });\n        if (typeof sources === \"function\") {\n            sources = [new Observable(sources)];\n        }\n        if (isPromiseLike(sources)) {\n            sources.then(function (iterable) { return _this.start(iterable); }, _this.handlers.error);\n        }\n        else {\n            _this.start(sources);\n        }\n        return _this;\n    }\n    Concast.prototype.start = function (sources) {\n        if (this.sub !== void 0)\n            return;\n        this.sources = Array.from(sources);\n        this.handlers.complete();\n    };\n    Concast.prototype.deliverLastMessage = function (observer) {\n        if (this.latest) {\n            var nextOrError = this.latest[0];\n            var method = observer[nextOrError];\n            if (method) {\n                method.call(observer, this.latest[1]);\n            }\n            if (this.sub === null &&\n                nextOrError === \"next\" &&\n                observer.complete) {\n                observer.complete();\n            }\n        }\n    };\n    Concast.prototype.addObserver = function (observer) {\n        if (!this.observers.has(observer)) {\n            this.deliverLastMessage(observer);\n            this.observers.add(observer);\n            ++this.addCount;\n        }\n    };\n    Concast.prototype.removeObserver = function (observer, quietly) {\n        if (this.observers.delete(observer) &&\n            --this.addCount < 1 &&\n            !quietly) {\n            this.handlers.complete();\n        }\n    };\n    Concast.prototype.cleanup = function (callback) {\n        var _this = this;\n        var called = false;\n        var once = function () {\n            if (!called) {\n                called = true;\n                _this.observers.delete(observer);\n                callback();\n            }\n        };\n        var observer = {\n            next: once,\n            error: once,\n            complete: once,\n        };\n        var count = this.addCount;\n        this.addObserver(observer);\n        this.addCount = count;\n    };\n    return Concast;\n}(Observable));\nexport { Concast };\nfixObservableSubclass(Concast);\n"]},"metadata":{},"sourceType":"module"}