{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, isNonEmptyArray, fixObservableSubclass, getQueryDefinition } from \"../utilities/index.js\";\nvar assign = Object.assign,\n    hasOwnProperty = Object.hasOwnProperty;\n\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n        queryInfo = _a.queryInfo,\n        options = _a.options;\n\n    var _this = _super.call(this, function (observer) {\n      try {\n        var subObserver = observer._subscription._observer;\n\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n\n      var first = !_this.observers.size;\n\n      _this.observers.add(observer);\n\n      var last = _this.last;\n\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      if (first) {\n        _this.reobserve().catch(function () {});\n      }\n\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    _this.isTornDown = false;\n\n    var _b = queryManager.defaultOptions.watchQuery,\n        _c = _b === void 0 ? {} : _b,\n        _d = _c.fetchPolicy,\n        defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n\n    var _e = options.fetchPolicy,\n        fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n        _f = options.initialFetchPolicy,\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      initialFetchPolicy: initialFetchPolicy,\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    get: function () {\n      return this.queryManager.transform(this.options.query).document;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n\n          _this.observers.delete(observer);\n\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n\n      var subscription = _this.subscribe(observer);\n    });\n  };\n\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n\n    var _a = this.options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'no-cache' || fetchPolicy === 'standby' || this.queryManager.transform(this.options.query).hasForcedResolvers) {} else {\n      var diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n\n      if (diff.complete) {\n        delete result.partial;\n\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (__DEV__ && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  };\n\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n    return !this.last || !equal(this.last.result, newResult);\n  };\n\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n\n    var reobserveOptions = {\n      pollInterval: 0\n    };\n    var fetchPolicy = this.options.fetchPolicy;\n\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        __DEV__ && invariant.warn(\"Called refetch(\".concat(JSON.stringify(variables), \") for query \").concat(((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || JSON.stringify(queryDef), \", which does not declare a $variables variable.\\nDid you mean to call refetch(variables) instead of refetch({ variables })?\"));\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n\n    var qid = this.queryManager.generateQueryId();\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    var updatedQuerySet = new Set();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      _this.queryManager.cache.batch({\n        update: function (cache) {\n          var updateQuery = fetchMoreOptions.updateQuery;\n\n          if (updateQuery) {\n            cache.updateQuery({\n              query: _this.query,\n              variables: _this.variables,\n              returnPartialData: true,\n              optimistic: false\n            }, function (previous) {\n              return updateQuery(previous, {\n                fetchMoreResult: fetchMoreResult.data,\n                variables: combinedOptions.variables\n              });\n            });\n          } else {\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data\n            });\n          }\n        },\n        onWatchUpdated: function (watch) {\n          updatedQuerySet.add(watch.query);\n        }\n      });\n\n      return fetchMoreResult;\n    }).finally(function () {\n      if (!updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  };\n\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n\n        __DEV__ && invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n          fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n          _b = options.initialFetchPolicy,\n          initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n\n      if (fetchPolicy === \"standby\") {} else if (typeof options.nextFetchPolicy === \"function\") {\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  };\n\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager.fetchQueryObservable(this.queryId, options, newNetworkStatus);\n  };\n\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    var _a = this,\n        pollingInfo = _a.pollingInfo,\n        pollInterval = _a.options.pollInterval;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    __DEV__ ? invariant(pollInterval, 'Attempted to start a polling query without a polling interval.') : invariant(pollInterval, 10);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n\n    var maybeFetch = function () {\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n          _this.reobserve({\n            fetchPolicy: \"network-only\"\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n\n      ;\n    };\n\n    var poll = function () {\n      var info = _this.pollingInfo;\n\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  };\n\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    this.last = __assign(__assign({}, this.last), {\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    });\n\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n\n    return this.last;\n  };\n\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    var _this = this;\n\n    this.isTornDown = false;\n    var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch || newNetworkStatus === NetworkStatus.fetchMore || newNetworkStatus === NetworkStatus.poll;\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ? mergedOptions : assign(this.options, mergedOptions);\n\n    if (!useDisposableConcast) {\n      this.updatePolling();\n\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) && options.fetchPolicy !== \"standby\" && options.fetchPolicy === oldFetchPolicy) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    var variables = options.variables && __assign({}, options.variables);\n\n    var concast = this.fetch(options, newNetworkStatus);\n    var observer = {\n      next: function (result) {\n        _this.reportResult(result, variables);\n      },\n      error: function (error) {\n        _this.reportError(error, variables);\n      }\n    };\n\n    if (!useDisposableConcast) {\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n    return concast.promise;\n  };\n\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(this.getCurrentResult(false), this.variables);\n  };\n\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n\n    if (lastError || this.isDifferentFromLastResult(result)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  };\n\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, 'error', this.last.error = error);\n  };\n\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n\n  return ObservableQuery;\n}(Observable);\n\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n      fetchPolicy = _a.fetchPolicy,\n      nextFetchPolicy = _a.nextFetchPolicy;\n\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      nextFetchPolicy: function () {\n        this.nextFetchPolicy = nextFetchPolicy;\n\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n\n        return fetchPolicy;\n      }\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  __DEV__ && invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(missing) {\n  if (__DEV__ && missing) {\n    __DEV__ && invariant.debug(\"Missing cache result fields: \".concat(JSON.stringify(missing)), missing);\n  }\n}","map":{"version":3,"mappings":"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","names":["__assign","__extends","invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","isNonEmptyArray","fixObservableSubclass","getQueryDefinition","assign","Object","hasOwnProperty","ObservableQuery","_super","_a","queryManager","queryInfo","options","_this","call","observer","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","observers","size","add","last","result","next","reobserve","catch","delete","tearDownQuery","Set","subscriptions","isTornDown","_b","defaultOptions","watchQuery","_c","_d","fetchPolicy","defaultFetchPolicy","_e","_f","initialFetchPolicy","queryId","generateQueryId","opDef","query","queryName","name","value","defineProperty","prototype","get","transform","document","enumerable","configurable","variables","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","getCurrentResult","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","loading","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","__DEV__","partialRefetch","logMissingFieldErrors","missing","updateLastResult","isDifferentFromLastResult","newResult","getLast","key","variablesMustMatch","getLastError","resetLastResults","resetQueryStoreErrors","resetErrors","refetch","reobserveOptions","pollInterval","queryDef","vars","variableDefinitions","some","v","variable","warn","concat","JSON","stringify","resetLastWrite","fetchMore","fetchMoreOptions","combinedOptions","qid","originalNetworkStatus","notifyOnNetworkStatusChange","observe","updatedQuerySet","fetchQuery","then","fetchMoreResult","cache","batch","update","updateQuery","optimistic","previous","writeQuery","onWatchUpdated","watch","finally","has","reobserveCacheFirst","subscribeToMore","startGraphQLSubscription","context","subscriptionData","err","onError","setOptions","newOptions","setVariables","mapFn","broadcastQueries","startPolling","updatePolling","stopPolling","applyNextFetchPolicy","reason","nextFetchPolicy","observable","fetch","newNetworkStatus","setObservableQuery","fetchQueryObservable","ssrMode","pollingInfo","clearTimeout","timeout","interval","info","maybeFetch","poll","assumeImmutableResults","errors","useDisposableConcast","oldVariables","oldFetchPolicy","mergedOptions","concast","reportResult","reportError","removeObserver","addObserver","promise","lastError","errorResult","graphQLErrors","hasObservers","forEach","sub","clear","stopQuery","obsQuery","apply","arguments","message","stack","debug"],"sources":["C:/Users/jamesi/Desktop/Repos/full-stack-open/part8/library-frontend/node_modules/@apollo/client/core/ObservableQuery.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, isNonEmptyArray, fixObservableSubclass, getQueryDefinition, } from \"../utilities/index.js\";\nvar assign = Object.assign, hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = _super.call(this, function (observer) {\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            }\n            catch (_a) { }\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            }\n            else if (last && last.result) {\n                observer.next && observer.next(last.result);\n            }\n            if (first) {\n                _this.reobserve().catch(function () { });\n            }\n            return function () {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        _this.isTornDown = false;\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, _f = options.initialFetchPolicy, initialFetchPolicy = _f === void 0 ? (fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy) : _f;\n        _this.options = __assign(__assign({}, options), { initialFetchPolicy: initialFetchPolicy, fetchPolicy: fetchPolicy });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = getOperationDefinition(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        get: function () {\n            return this.queryManager.transform(this.options.query).document;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        get: function () {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n        if (saveAsLastResult === void 0) { saveAsLastResult = true; }\n        var lastResult = this.getLastResult(true);\n        var networkStatus = this.queryInfo.networkStatus ||\n            (lastResult && lastResult.networkStatus) ||\n            NetworkStatus.ready;\n        var result = __assign(__assign({}, lastResult), { loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (fetchPolicy === 'network-only' ||\n            fetchPolicy === 'no-cache' ||\n            fetchPolicy === 'standby' ||\n            this.queryManager.transform(this.options.query).hasForcedResolvers) {\n        }\n        else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if (equal(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                delete result.partial;\n                if (diff.complete &&\n                    result.networkStatus === NetworkStatus.loading &&\n                    (fetchPolicy === 'cache-first' ||\n                        fetchPolicy === 'cache-only')) {\n                    result.networkStatus = NetworkStatus.ready;\n                    result.loading = false;\n                }\n            }\n            else {\n                result.partial = true;\n            }\n            if (__DEV__ &&\n                !diff.complete &&\n                !this.options.partialRefetch &&\n                !result.loading &&\n                !result.data &&\n                !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        return !this.last || !equal(this.last.result, newResult);\n    };\n    ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n        var last = this.last;\n        if (last &&\n            last[key] &&\n            (!variablesMustMatch || equal(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.last;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        this.queryManager.resetErrors(this.queryId);\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var _a;\n        var reobserveOptions = {\n            pollInterval: 0,\n        };\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-and-network') {\n            reobserveOptions.fetchPolicy = fetchPolicy;\n        }\n        else if (fetchPolicy === 'no-cache') {\n            reobserveOptions.fetchPolicy = 'no-cache';\n        }\n        else {\n            reobserveOptions.fetchPolicy = 'network-only';\n        }\n        if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n            var queryDef = getQueryDefinition(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function (v) { return v.variable.name.value === \"variables\"; })) {\n                __DEV__ && invariant.warn(\"Called refetch(\".concat(JSON.stringify(variables), \") for query \").concat(((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || JSON.stringify(queryDef), \", which does not declare a $variables variable.\\nDid you mean to call refetch(variables) instead of refetch({ variables })?\"));\n            }\n        }\n        if (variables && !equal(this.options.variables, variables)) {\n            reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), { query: this.query }), fetchMoreOptions), { variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables) }))), { fetchPolicy: \"no-cache\" });\n        var qid = this.queryManager.generateQueryId();\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            _this.queryManager.cache.batch({\n                update: function (cache) {\n                    var updateQuery = fetchMoreOptions.updateQuery;\n                    if (updateQuery) {\n                        cache.updateQuery({\n                            query: _this.query,\n                            variables: _this.variables,\n                            returnPartialData: true,\n                            optimistic: false,\n                        }, function (previous) { return updateQuery(previous, {\n                            fetchMoreResult: fetchMoreResult.data,\n                            variables: combinedOptions.variables,\n                        }); });\n                    }\n                    else {\n                        cache.writeQuery({\n                            query: combinedOptions.query,\n                            variables: combinedOptions.variables,\n                            data: fetchMoreResult.data,\n                        });\n                    }\n                },\n                onWatchUpdated: function (watch) {\n                    updatedQuerySet.add(watch.query);\n                },\n            });\n            return fetchMoreResult;\n        }).finally(function () {\n            if (!updatedQuerySet.has(_this.query)) {\n                reobserveCacheFirst(_this);\n            }\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                __DEV__ && invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.setVariables = function (variables) {\n        if (equal(this.variables, variables)) {\n            return this.observers.size\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables,\n        }, NetworkStatus.setVariables);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var result = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n        var newResult = mapFn(result, {\n            variables: this.variables,\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables,\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") {\n            }\n            else if (typeof options.nextFetchPolicy === \"function\") {\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy,\n                });\n            }\n            else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            }\n            else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {\n        this.queryManager.setObservableQuery(this);\n        return this.queryManager.fetchQueryObservable(this.queryId, options, newNetworkStatus);\n    };\n    ObservableQuery.prototype.updatePolling = function () {\n        var _this = this;\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo &&\n            pollingInfo.interval === pollInterval) {\n            return;\n        }\n        __DEV__ ? invariant(pollInterval, 'Attempted to start a polling query without a polling interval.') : invariant(pollInterval, 10);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function () {\n            if (_this.pollingInfo) {\n                if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n                    _this.reobserve({\n                        fetchPolicy: \"network-only\",\n                    }, NetworkStatus.poll).then(poll, poll);\n                }\n                else {\n                    poll();\n                }\n            }\n            ;\n        };\n        var poll = function () {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n        if (variables === void 0) { variables = this.variables; }\n        this.last = __assign(__assign({}, this.last), { result: this.queryManager.assumeImmutableResults\n                ? newResult\n                : cloneDeep(newResult), variables: variables });\n        if (!isNonEmptyArray(newResult.errors)) {\n            delete this.last.error;\n        }\n        return this.last;\n    };\n    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch ||\n            newNetworkStatus === NetworkStatus.fetchMore ||\n            newNetworkStatus === NetworkStatus.poll;\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = compact(this.options, newOptions || {});\n        var options = useDisposableConcast\n            ? mergedOptions\n            : assign(this.options, mergedOptions);\n        if (!useDisposableConcast) {\n            this.updatePolling();\n            if (newOptions &&\n                newOptions.variables &&\n                !equal(newOptions.variables, oldVariables) &&\n                options.fetchPolicy !== \"standby\" &&\n                options.fetchPolicy === oldFetchPolicy) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = NetworkStatus.setVariables;\n                }\n            }\n        }\n        var variables = options.variables && __assign({}, options.variables);\n        var concast = this.fetch(options, newNetworkStatus);\n        var observer = {\n            next: function (result) {\n                _this.reportResult(result, variables);\n            },\n            error: function (error) {\n                _this.reportError(error, variables);\n            },\n        };\n        if (!useDisposableConcast) {\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast.promise;\n    };\n    ObservableQuery.prototype.observe = function () {\n        this.reportResult(this.getCurrentResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function (result, variables) {\n        var lastError = this.getLastError();\n        if (lastError || this.isDifferentFromLastResult(result)) {\n            if (lastError || !result.partial || this.options.returnPartialData) {\n                this.updateLastResult(result, variables);\n            }\n            iterateObserversSafely(this.observers, 'next', result);\n        }\n    };\n    ObservableQuery.prototype.reportError = function (error, variables) {\n        var errorResult = __assign(__assign({}, this.getLastResult()), { error: error, errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false });\n        this.updateLastResult(errorResult, variables);\n        iterateObserversSafely(this.observers, 'error', this.last.error = error);\n    };\n    ObservableQuery.prototype.hasObservers = function () {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        if (this.isTornDown)\n            return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n    var _a = obsQuery.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n    if (fetchPolicy === \"cache-and-network\" ||\n        fetchPolicy === \"network-only\") {\n        return obsQuery.reobserve({\n            fetchPolicy: \"cache-first\",\n            nextFetchPolicy: function () {\n                this.nextFetchPolicy = nextFetchPolicy;\n                if (typeof nextFetchPolicy === \"function\") {\n                    return nextFetchPolicy.apply(this, arguments);\n                }\n                return fetchPolicy;\n            },\n        });\n    }\n    return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    __DEV__ && invariant.error('Unhandled error', error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n    if (__DEV__ && missing) {\n        __DEV__ && invariant.debug(\"Missing cache result fields: \".concat(JSON.stringify(missing)), missing);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}