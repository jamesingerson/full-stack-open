{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\nvar didWarnUncachedGetSnapshot = false;\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = React[uSESKey];\nexport var useSyncExternalStore = realHook || function (subscribe, getSnapshot, getServerSnapshot) {\n  var value = getSnapshot();\n\n  if (__DEV__ && !didWarnUncachedGetSnapshot && value !== getSnapshot()) {\n    didWarnUncachedGetSnapshot = true;\n    __DEV__ && invariant.error('The result of getSnapshot should be cached to avoid an infinite loop');\n  }\n\n  var _a = React.useState({\n    inst: {\n      value: value,\n      getSnapshot: getSnapshot\n    }\n  }),\n      inst = _a[0].inst,\n      forceUpdate = _a[1];\n\n  if (canUseLayoutEffect) {\n    React.useLayoutEffect(function () {\n      Object.assign(inst, {\n        value: value,\n        getSnapshot: getSnapshot\n      });\n\n      if (checkIfSnapshotChanged(inst)) {\n        forceUpdate({\n          inst: inst\n        });\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, {\n      value: value,\n      getSnapshot: getSnapshot\n    });\n  }\n\n  React.useEffect(function () {\n    if (checkIfSnapshotChanged(inst)) {\n      forceUpdate({\n        inst: inst\n      });\n    }\n\n    return subscribe(function handleStoreChange() {\n      if (checkIfSnapshotChanged(inst)) {\n        forceUpdate({\n          inst: inst\n        });\n      }\n    });\n  }, [subscribe]);\n  return value;\n};\n\nfunction checkIfSnapshotChanged(_a) {\n  var value = _a.value,\n      getSnapshot = _a.getSnapshot;\n\n  try {\n    return value !== getSnapshot();\n  } catch (_b) {\n    return true;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,kCAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,0BAAnC;AACA,IAAIC,0BAA0B,GAAG,KAAjC;AACA,IAAIC,OAAO,GAAG,sBAAd;AACA,IAAIC,QAAQ,GAAGJ,KAAK,CAACG,OAAD,CAApB;AACA,OAAO,IAAIE,oBAAoB,GAAGD,QAAQ,IAAK,UAAUE,SAAV,EAAqBC,WAArB,EAAkCC,iBAAlC,EAAqD;AAChG,MAAIC,KAAK,GAAGF,WAAW,EAAvB;;AACA,MAAIG,OAAO,IACP,CAACR,0BADD,IAEAO,KAAK,KAAKF,WAAW,EAFzB,EAE6B;AACzBL,8BAA0B,GAAG,IAA7B;AACAQ,WAAO,IAAIX,SAAS,CAACY,KAAV,CAAgB,sEAAhB,CAAX;AACH;;AACD,MAAIC,EAAE,GAAGZ,KAAK,CAACa,QAAN,CAAe;AAAEC,QAAI,EAAE;AAAEL,WAAK,EAAEA,KAAT;AAAgBF,iBAAW,EAAEA;AAA7B;AAAR,GAAf,CAAT;AAAA,MAA+EO,IAAI,GAAGF,EAAE,CAAC,CAAD,CAAF,CAAME,IAA5F;AAAA,MAAkGC,WAAW,GAAGH,EAAE,CAAC,CAAD,CAAlH;;AACA,MAAIX,kBAAJ,EAAwB;AACpBD,SAAK,CAACgB,eAAN,CAAsB,YAAY;AAC9BC,YAAM,CAACC,MAAP,CAAcJ,IAAd,EAAoB;AAAEL,aAAK,EAAEA,KAAT;AAAgBF,mBAAW,EAAEA;AAA7B,OAApB;;AACA,UAAIY,sBAAsB,CAACL,IAAD,CAA1B,EAAkC;AAC9BC,mBAAW,CAAC;AAAED,cAAI,EAAEA;AAAR,SAAD,CAAX;AACH;AACJ,KALD,EAKG,CAACR,SAAD,EAAYG,KAAZ,EAAmBF,WAAnB,CALH;AAMH,GAPD,MAQK;AACDU,UAAM,CAACC,MAAP,CAAcJ,IAAd,EAAoB;AAAEL,WAAK,EAAEA,KAAT;AAAgBF,iBAAW,EAAEA;AAA7B,KAApB;AACH;;AACDP,OAAK,CAACoB,SAAN,CAAgB,YAAY;AACxB,QAAID,sBAAsB,CAACL,IAAD,CAA1B,EAAkC;AAC9BC,iBAAW,CAAC;AAAED,YAAI,EAAEA;AAAR,OAAD,CAAX;AACH;;AACD,WAAOR,SAAS,CAAC,SAASe,iBAAT,GAA6B;AAC1C,UAAIF,sBAAsB,CAACL,IAAD,CAA1B,EAAkC;AAC9BC,mBAAW,CAAC;AAAED,cAAI,EAAEA;AAAR,SAAD,CAAX;AACH;AACJ,KAJe,CAAhB;AAKH,GATD,EASG,CAACR,SAAD,CATH;AAUA,SAAOG,KAAP;AACH,CA/BM;;AAgCP,SAASU,sBAAT,CAAgCP,EAAhC,EAAoC;AAChC,MAAIH,KAAK,GAAGG,EAAE,CAACH,KAAf;AAAA,MAAsBF,WAAW,GAAGK,EAAE,CAACL,WAAvC;;AACA,MAAI;AACA,WAAOE,KAAK,KAAKF,WAAW,EAA5B;AACH,GAFD,CAGA,OAAOe,EAAP,EAAW;AACP,WAAO,IAAP;AACH;AACJ","names":["invariant","React","canUseLayoutEffect","didWarnUncachedGetSnapshot","uSESKey","realHook","useSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","value","__DEV__","error","_a","useState","inst","forceUpdate","useLayoutEffect","Object","assign","checkIfSnapshotChanged","useEffect","handleStoreChange","_b"],"sources":["C:/Users/jamesi/Desktop/Repos/full-stack-open/part8/library-frontend/node_modules/@apollo/client/react/hooks/useSyncExternalStore.js"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\nvar didWarnUncachedGetSnapshot = false;\nvar uSESKey = \"useSyncExternalStore\";\nvar realHook = React[uSESKey];\nexport var useSyncExternalStore = realHook || (function (subscribe, getSnapshot, getServerSnapshot) {\n    var value = getSnapshot();\n    if (__DEV__ &&\n        !didWarnUncachedGetSnapshot &&\n        value !== getSnapshot()) {\n        didWarnUncachedGetSnapshot = true;\n        __DEV__ && invariant.error('The result of getSnapshot should be cached to avoid an infinite loop');\n    }\n    var _a = React.useState({ inst: { value: value, getSnapshot: getSnapshot } }), inst = _a[0].inst, forceUpdate = _a[1];\n    if (canUseLayoutEffect) {\n        React.useLayoutEffect(function () {\n            Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        }, [subscribe, value, getSnapshot]);\n    }\n    else {\n        Object.assign(inst, { value: value, getSnapshot: getSnapshot });\n    }\n    React.useEffect(function () {\n        if (checkIfSnapshotChanged(inst)) {\n            forceUpdate({ inst: inst });\n        }\n        return subscribe(function handleStoreChange() {\n            if (checkIfSnapshotChanged(inst)) {\n                forceUpdate({ inst: inst });\n            }\n        });\n    }, [subscribe]);\n    return value;\n});\nfunction checkIfSnapshotChanged(_a) {\n    var value = _a.value, getSnapshot = _a.getSnapshot;\n    try {\n        return value !== getSnapshot();\n    }\n    catch (_b) {\n        return true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}